# Install binary from tar.gz. This is useful for binaries that are not available in apt or yum.
#
# See below for an example of how to use this role.
# ```vars/main.yaml
# binary_archive:
#   - name: cert
#     version_arg: "-v"
#     version: "0.15.0"
#     download_url: https://github.com/genkiroid/cert/releases/download/0.15.0/cert_0.15.0_linux_64bit.tar.gz
#     copy_root: ""
#     binaries:
#       - cert
#   - name: circleci
#     version_arg: "version"
#     version: "0.1.22426"
#     download_url: https://github.com/CircleCI-Public/circleci-cli/releases/download/v0.1.22426/circleci-cli_0.1.22426_linux_amd64.tar.gz
#     copy_root: "circleci-cli_0.1.22426_linux_amd64/"
#     binaries:
#       - circleci
# ```
#
# ```yaml
# - name: "binary archive - Install tools"
#   ansible.builtin.include_tasks: ../include_role/ubuntu/install_binary_archive.yaml
#   with_items: "{{ binary_archive }}"
#   loop_control:
#     loop_var: args
# ```

- name: "binary_archive ({{ args.name }}) - check installed"
  ansible.builtin.shell: "set -o pipefail && {{ args.name }} {{ args.version_arg }} 2>&1 | grep {{ args.version }}"
  args:
    executable: /bin/bash
  register: binary_archive_exists
  changed_when: false
  ignore_errors: true

- name: "binary_archive ({{ args.name }}) - tmp directory"
  ansible.builtin.file:
    path: "/tmp/{{ args.name }}"
    state: directory
    mode: "0755"
  when: binary_archive_exists is failed

- name: "binary_archive ({{ args.name }}) - download"
  ansible.builtin.get_url:
    url: "{{ args.download_url }}"
    dest: "/tmp/{{ args.name }}/{{ args.download_url | basename }}"
    mode: "0755"
  when: binary_archive_exists is failed

- name: "binary_archive ({{ args.name }}) - unarchive"
  ansible.builtin.unarchive:
    src: "/tmp/{{ args.name }}/{{ args.download_url | basename }}"
    dest: /tmp/{{ args.name }}
    remote_src: true
  when: binary_archive_exists is failed

- name: "binary_archive ({{ args.name }}) - copy"
  become: true
  ansible.builtin.copy:
    src: "/tmp/{{ args.name }}/{{ args.copy_root }}{{ item }}"
    dest: "{{ args.dest_override | default('/usr/local/bin/') }}"
    mode: "a+x"
    remote_src: true
  with_items: "{{ args.binaries }}"
  when: binary_archive_exists is failed

- name: "binary_archive ({{ args.name }}) - remove temp files"
  ansible.builtin.file:
    state: absent
    path: /tmp/{{ args.name }}
  when: binary_archive_exists is failed
