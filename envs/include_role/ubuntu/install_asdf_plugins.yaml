# Install asdf plugins. These are tools that are installed by [asdf](https://asdf-vm.com/).
# see: https://github.com/asdf-vm/asdf-plugins
#
# See below for an example of how to use this role.
# ```vars/main.yaml
# asdf_plugins:
#   - name: argocd
#     source: https://github.com/beardix/asdf-argocd.git
#     version_arg: "version --client"
#     version: "2.6.6"
#   - name: aws-vault
#     source: https://github.com/virtualstaticvoid/asdf-aws-vault.git
#     version_arg: "--version"
#     version: "6.6.2"
#   - name: awscli
#     source: https://github.com/MetricMike/asdf-awscli.git
#     version_arg: "--version"
#     version: "2.9.22"
# ```
#
# ```tasks/main.yaml
# - name: "asdf - Install asdf plugins"
#   ansible.builtin.include_tasks: ../include_role/ubuntu/install_asdf_plugins.yaml
#   with_items: "{{ asdf_plugins }}"
#   loop_control:
#     loop_var: args
# ```

- name: "asdf_plugin ({{ args.name }}) - check alrady installed"
  ansible.builtin.shell: "set -o pipefail && {{ args.name }} {{ args.version_arg }} 2>&1 | head -n 1 | grep {{ args.version }}"
  args:
    executable: /bin/bash
  environment:
    # require re-login shell for 1st install, let's manual export shellenv and use it
    PATH: "{{ ansible_home }}/.asdf/shims:{{ ansible_home }}/.asdf/bin:{{ ansible_env.PATH }}"
  when: asdf_plugin_exists is failed
  register: asdf_exists
  changed_when: false
  ignore_errors: true

# https://asdf-vm.com/guide/getting-started.html#_6-set-a-version
- name: "asdf_plugin ({{ args.name }}) - check plugin installed and update"
  ansible.builtin.command: "asdf plugin update {{ args.name }} 2>&1"
  args:
    executable: /bin/bash
  environment:
    # require re-login shell for 1st install, let's manual export shellenv and use it
    PATH: "{{ ansible_home }}/.asdf/shims:{{ ansible_home }}/.asdf/bin:{{ ansible_env.PATH }}"
  register: asdf_plugin_exists
  changed_when: false
  ignore_errors: true
  when: asdf_exists is failed

- name: "asdf_plugin ({{ args.name }}) - install plugin"
  ansible.builtin.command: "asdf plugin add {{ args.name }} {{ args.source }}"
  args:
    executable: /bin/bash
  environment:
    # require re-login shell for 1st install, let's manual export shellenv and use it
    PATH: "{{ ansible_home }}/.asdf/shims:{{ ansible_home }}/.asdf/bin:{{ ansible_env.PATH }}"
  register: asdf_plugin_install
  changed_when: asdf_plugin_install.rc != 0
  when: asdf_plugin_exists is failed

- name: "asdf_plugin ({{ args.name }}) - install version ({{ args.version }})"
  ansible.builtin.command: "asdf install {{ args.name }} {{ args.version }}"
  args:
    executable: /bin/bash
  environment:
    # require re-login shell for 1st install, let's manual export shellenv and use it
    PATH: "{{ ansible_home }}/.asdf/shims:{{ ansible_home }}/.asdf/bin:{{ ansible_env.PATH }}"
  register: asdf_plugin_install_version
  changed_when: asdf_plugin_install_version.rc != 0
  when: asdf_exists is failed

- name: "asdf_plugin ({{ args.name }}) - set global version ({{ args.version }})"
  ansible.builtin.command: "asdf global {{ args.name }} {{ args.version }}"
  args:
    executable: /bin/bash
  environment:
    # require re-login shell for 1st install, let's manual export shellenv and use it
    PATH: "{{ ansible_home }}/.asdf/shims:{{ ansible_home }}/.asdf/bin:{{ ansible_env.PATH }}"
  register: asdf_plugin_global_version
  changed_when: asdf_plugin_global_version.rc != 0
  when: asdf_exists is failed

- name: "asdf_plugin ({{ args.name }}) - check installed"
  ansible.builtin.shell: "set -o pipefail && {{ args.name }} {{ args.version_arg }} 2>&1 | head -n 1 | grep {{ args.version }}"
  args:
    executable: /bin/bash
  environment:
    # require re-login shell for 1st install, let's manual export shellenv and use it
    PATH: "{{ ansible_home }}/.asdf/shims:{{ ansible_home }}/.asdf/bin:{{ ansible_env.PATH }}"
  changed_when: false
  when: asdf_exists is failed
