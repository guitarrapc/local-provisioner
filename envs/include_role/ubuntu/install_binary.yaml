# Install binary packages. These are packages that are installed by downloading a binary and then copying it to the destination.
#
# See below for an example of how to use this role.
# ```vars/main.yaml
# - name: NAME_OF_BINARY
#   version_arg: "--version"
#   version: "1.0.0" # use version args for version detection.
#   download_url: https://github.com/owner/repo/releases/download/verison/binary_name
# - name: NAME_OF_BINARY
#   checksum_type: sha256sum
#   checksum: 68c7301c41b1bd1d89668bf27d5314a10b8330f694e711401fe1494d2c9780c2 # use checksum for verison detection.
#   download_url: https://github.com/owner/repo/releases/download/verison/binary_name
# ```
#
# ```tasks/main.yaml
# - name: "binary - Install tools"
#   ansible.builtin.include_tasks: ../include_role/ubuntu/install_binary.yaml
#   with_items: "{{ binary_install }}"
#   loop_control:
#     loop_var: args
# ```
- name: "binary ({{ args.name }}) - check already installed"
  ansible.builtin.shell: "set -o pipefail && {{ args.name }} {{ args.version_arg }} 2>&1 | grep {{ args.version }}"
  args:
    executable: /bin/bash
  register: binary_exists
  when: (args.version_arg is defined) and (args.version is defined)
  changed_when: false
  ignore_errors: true

- name: "binary ({{ args.name }}) - check installed with checksum"
  ansible.builtin.shell: "set -o pipefail && {{ args.checksum_type }} /usr/local/bin/{{ args.name }} | grep {{ args.checksum }}"
  args:
    executable: /bin/bash
  register: binary_exists_checksum
  when: (args.checksum_type is defined) and (args.checksum is defined)
  changed_when: false
  ignore_errors: true

- name: "binary ({{ args.name }}) - download"
  ansible.builtin.get_url:
    url: "{{ args.download_url }}"
    dest: "/tmp/{{ args.name }}"
    mode: "0755"
  when: (binary_exists is failed) or (binary_exists_checksum is failed)

- name: "binary ({{ args.name }}) - copy"
  become: true
  ansible.builtin.copy:
    src: "/tmp/{{ args.name }}"
    dest: "{{ args.dest_override | default('/usr/local/bin/') }}"
    mode: "a+x"
    remote_src: true
  when: (binary_exists is failed) or (binary_exists_checksum is failed)

- name: "binary ({{ args.name }}) - remove temp files"
  ansible.builtin.file:
    state: absent
    path: /tmp/{{ args.name }}
  when: (binary_exists is failed) or (binary_exists_checksum is failed)

- name: "binary ({{ args.name }}) - check installed"
  ansible.builtin.shell: "set -o pipefail && {{ args.name }} {{ args.version_arg }} 2>&1 | grep {{ args.version }}"
  args:
    executable: /bin/bash
  when: (binary_exists is failed) or (binary_exists_checksum is failed)
