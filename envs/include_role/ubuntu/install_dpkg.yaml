# Install dpkg packages. These are packages that are installed by downloading a .deb file and then installing it with dpkg.
#
# See below for an example of how to use this role.
# ```vars/main.yaml
# dpkg_install:
#   - name: session-manager-plugin
#     version_arg: "--version"
#     version: "1.2.398.0"
#     download_url: https://s3.amazonaws.com/session-manager-downloads/plugin/1.2.398.0/ubuntu_64bit/session-manager-plugin.deb
#   - name: trivy
#     version_arg: "--version"
#     version: "0.18.3"
#     download_url: https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
# ```
#
# ```vars/main.yaml
# - name: "dpkg - Install tools"
#   ansible.builtin.include_tasks: ../include_role/ubuntu/install_dpkg.yaml
#   with_items: "{{ dpkg_install }}"
#   loop_control:
#     loop_var: args
# ```

- name: "dpkg ({{ args.name }}) - check already installed"
  ansible.builtin.shell: "set -o pipefail && {{ args.name }} {{ args.version_arg }} 2>&1 | head -n 1 | grep {{ args.version }}"
  args:
    executable: /bin/bash
  register: dpkg_exists
  changed_when: dpkg_exists.rc != 0
  ignore_errors: true
  when: (args.version_arg is defined) and (args.version is defined)

- name: "dpkg ({{ args.name }}) - download"
  ansible.builtin.get_url:
    url: "{{ args.download_url }}"
    dest: "/tmp/{{ args.name }}.deb"
    mode: "0644"
  when: dpkg_exists is failed

- name: "dpkg ({{ args.name }}) - install"
  become: true
  ansible.builtin.command: dpkg -i /tmp/{{ args.name }}.deb
  register: dpkg_install
  changed_when: dpkg_install.rc != 0
  when: dpkg_exists is failed

- name: "dpkg ({{ args.name }}) - remove temp files"
  ansible.builtin.file:
    state: absent
    path: /tmp/{{ args.name }}.deb
  when: dpkg_exists is failed

- name: "dpkg ({{ args.name }}) - check installed"
  ansible.builtin.shell: "set -o pipefail && {{ args.name }} {{ args.version_arg }} 2>&1 | head -n 1 | grep {{ args.version }}"
  args:
    executable: /bin/bash
  when: dpkg_exists is failed
