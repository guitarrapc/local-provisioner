---
# .kube/config
- name: check user exists
  stat:
    path: "/mnt/c/Users/guitarrapc/.kube/config"
  register: win_user_stat_result

- name: create kube/.config symlinks
  file:
    src: "/mnt/c/Users/guitarrapc/.kube/config"
    dest: "{{ ansible_home }}/.kube/config"
    state: link
  when: win_user_stat_result.stat.exists

# kubectl
- name: pickup installed kubectl versions
  shell: kubectl version | grep {{ kubectl_version }}
  register: kubectl_exists
  changed_when: false
  ignore_errors: yes

- name: download kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: "{{ ansible_home }}/kubectl"
  register: download_kubectl
  when: kubectl_exists is failed

- name: copy kubectl
  become: yes
  copy:
    src: "{{ ansible_home }}/kubectl"
    dest: /usr/local/bin
  when: kubectl_exists is failed

- name: remove kubectl
  file:
    state: absent
    path: "{{ ansible_home }}/kubectl"
  when: download_kubectl is succeeded

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/kubectl
    mode: "0755"

- name: confirm kubectl exists
  shell: ls /usr/local/bin/kubectl && kubectl version | grep {{ kubectl_version }}
  changed_when: false

# kubeadm
- name: add kubeadm apt_key
  become: yes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

- name: add kube apt
  become: yes
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: install kubeadm
  become: yes
  apt:
    pkg: kubeadm
    update_cache: yes

# helm3
- name: pickup installed helm3 versions
  shell: helm version | grep {{ helm_version }}
  register: helm3_exists
  changed_when: false
  ignore_errors: yes

- name: download helm3
  get_url:
    url: https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz
    dest: "{{ ansible_home }}/helm3.tar.gz"
  register: download_helm3
  when: helm3_exists is failed

- name: unarchive helm3
  command: tar -zxvf "{{ ansible_home }}/helm3.tar.gz"
  args:
    chdir: "{{ ansible_home }}/"
  register: unarchive_helm3
  when: helm3_exists is failed

- name: copy helm3
  become: yes
  copy:
    src: "{{ ansible_home }}/linux-amd64/helm"
    dest: /usr/local/bin
  when: helm3_exists is failed

- name: remove helm3.tar.gz
  file:
    state: absent
    path: "{{ ansible_home }}/helm3.tar.gz"
  when: download_helm3 is succeeded

- name: remove helm3 dir
  file:
    state: absent
    path: "{{ ansible_home }}/linux-amd64"
  when: unarchive_helm3 is succeeded

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/helm
    mode: "0755"

- name: confirm helm exists
  shell: ls /usr/local/bin/helm && helm version | grep {{ helm_version }}
  changed_when: false

# kubectx
- name: clone kubectx
  become: yes
  git:
    repo: https://github.com/ahmetb/kubectx.git
    dest: "{{ ansible_home}}/github/kubectx"
    accept_hostkey: yes

- name: create kubectx symlinks
  become: yes
  file:
    src: "{{ ansible_home }}/github/kubectx/kubectx"
    dest: "/usr/local/bin/kubectx"
    state: link

- name: create kubens symlinks
  become: yes
  file:
    src: "{{ ansible_home }}/github/kubectx/kubens"
    dest: "/usr/local/bin/kubens"
    state: link

# stern
- name: pickup installed stern versions
  shell: stern --version | grep {{ stern_version }}
  register: stern_exists
  changed_when: false
  ignore_errors: yes

- name: download stern
  get_url:
    url: https://github.com/wercker/stern/releases/download/{{ stern_version }}/stern_linux_amd64
    dest: "{{ ansible_home }}/stern"
  register: download_stern
  when: stern_exists is failed

- name: copy stern
  become: yes
  copy:
    src: "{{ ansible_home }}/stern"
    dest: /usr/local/bin
  when: stern_exists is failed

- name: remove stern
  file:
    state: absent
    path: "{{ ansible_home }}/stern"
  when: download_stern is succeeded

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/stern
    mode: "0755"

- name: confirm stern exists
  shell: ls /usr/local/bin/stern && stern --version | grep {{ stern_version }}
  changed_when: false

# kubergrunt
- name: pickup installed kubergrunt versions
  shell: kubergrunt --version | grep {{ kubergrunt_version }}
  register: kubergrunt_exists
  changed_when: false
  ignore_errors: yes

- name: download kubergrunt
  get_url:
    url: https://github.com/gruntwork-io/kubergrunt/releases/download/v{{ kubergrunt_version }}/kubergrunt_linux_amd64
    dest: "{{ ansible_home }}/kubergrunt"
  register: download_kubergrunt
  when: kubergrunt_exists is failed

- name: copy kubergrunt
  become: yes
  copy:
    src: "{{ ansible_home }}/kubergrunt"
    dest: /usr/local/bin
  when: kubergrunt_exists is failed

- name: remove kubergrunt
  file:
    state: absent
    path: "{{ ansible_home }}/kubergrunt"
  when: download_kubergrunt is succeeded

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/kubergrunt
    mode: "0755"

- name: confirm kubergrunt exists
  shell: ls /usr/local/bin/kubergrunt && kubergrunt --version | grep {{ kubergrunt_version }}
  changed_when: false

# istioctl
- name: pickup installed istioctl versions
  shell: istioctl version | grep {{ istioctl_version }}
  register: istioctl_exists
  changed_when: false
  ignore_errors: yes

- name: download istioctl
  get_url:
    url: https://git.io/getLatestIstio
    dest: "{{ ansible_home }}/istio_install.sh"
  register: download_istioctl
  when: istioctl_exists is failed

- name: install istioctl sh
  shell: ISTIO_VERSION={{ istioctl_version }} . ./istio_install.sh
  args:
    chdir: "{{ ansible_home }}/"
  when:
    - istioctl_exists is failed
    - download_istioctl is succeeded
  changed_when: false

- name: copy istioctl
  become: yes
  copy:
    src: "{{ ansible_home }}/istio-{{ istioctl_version }}/bin/istioctl"
    dest: /usr/local/bin
  when:
    - istioctl_exists is failed
    - download_istioctl is succeeded

- name: remove istioctl from bin/
  file:
    state: absent
    path: "{{ ansible_home }}/istio-{{ istioctl_version }}/bin/"
  when:
    - istioctl_exists is failed
    - download_istioctl is succeeded

- name: remove istioctl sh
  file:
    state: absent
    path: "{{ ansible_home }}/istio_install.sh"
  when:
    - istioctl_exists is failed
    - download_istioctl is succeeded

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/istioctl
    mode: "0755"
  when:
    - istioctl_exists is failed
    - download_istioctl is succeeded

- name: confirm istioctl exists
  shell: ls /usr/local/bin/istioctl && istioctl version | grep {{ istioctl_version }}
  changed_when: false

# kubesec
- name: pickup installed kubesec versions
  shell: kubesec --version | grep {{ kubesec_version }}
  register: kubesec_exists
  changed_when: false
  ignore_errors: yes

- name: download kubesec
  get_url:
    url: https://github.com/shyiko/kubesec/releases/download/{{ kubesec_version }}/kubesec-{{ kubesec_version }}-linux-amd64
    dest: "{{ ansible_home }}/kubesec"
  register: download_kubesec
  when: kubesec_exists is failed

- name: copy kubesec
  become: yes
  copy:
    src: "{{ ansible_home }}/kubesec"
    dest: /usr/local/bin
  when:
    - kubesec_exists is failed

- name: remove kubesec
  file:
    state: absent
    path: "{{ ansible_home }}/kubesec"
  when: download_kubesec is succeeded

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/kubesec
    mode: "0755"
  when: download_kubesec is succeeded

- name: confirm kubesec exists
  shell: ls /usr/local/bin/kubesec && kubesec --version | grep {{ kubesec_version }}
  changed_when: false

# kubeval
- name: pickup installed kubeval versions
  shell: kubeval --version | grep {{ kubeval_version }}
  register: kubeval_exists
  changed_when: false
  ignore_errors: yes

- name: download kubeval
  get_url:
    url: https://github.com/instrumenta/kubeval/releases/download/{{ kubeval_version }}/kubeval-linux-amd64.tar.gz
    dest: "{{ ansible_home }}/kubeval.tar.gz"
  register: download_kubeval
  when: kubeval_exists is failed

- name: unarchive kubeval
  command: tar -zxvf "{{ ansible_home }}/kubeval.tar.gz"
  args:
    chdir: "{{ ansible_home }}/"
  register: unarchive_kubeval
  when: kubeval_exists is failed

- name: copy kubeval
  become: yes
  copy:
    src: "{{ ansible_home }}/kubeval"
    dest: /usr/local/bin/kubeval
  when: kubeval_exists is failed

- name: remove kubeval files
  file:
    state: absent
    path: "{{ ansible_home }}/{{ item }}"
  with_items:
    - kubeval.tar.gz
    - LICENSE
    - README.md
    - kubeval
  when: kubeval_exists is failed

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/kubeval
    mode: "0755"
  when: kubeval_exists is failed

- name: confirm kubeval exists
  shell: ls /usr/local/bin/kubeval && kubeval --version | grep {{ kubeval_version }}
  changed_when: false
  when: kubeval_exists is failed

# mozilla/sops

- name: pickup installed sops versions
  shell: sops --version | grep {{ sops_version }}
  register: sops_exists
  changed_when: false
  ignore_errors: yes

- name: download sops
  get_url:
    url: https://github.com/mozilla/sops/releases/download/v{{ sops_version }}/sops-v{{ sops_version }}.linux
    dest: "{{ ansible_home }}/sops"
  register: download_sops
  when: sops_exists is failed

- name: copy kubeval
  become: yes
  copy:
    src: "{{ ansible_home }}/sops"
    dest: /usr/local/bin/sops
  when: sops_exists is failed

- name: remove sops files
  file:
    state: absent
    path: "{{ ansible_home }}/sops"
  when: sops_exists is failed

- name: change file permissions
  become: yes
  file:
    path: /usr/local/bin/sops
    mode: "0755"
  when: sops_exists is failed

- name: confirm sops exists
  shell: ls /usr/local/bin/sops && sops --version | grep {{ sops_version }}
  changed_when: false
  when: sops_exists is failed
